{
	"info": {
		"_postman_id": "794a7299-b100-4332-b763-6cbd63e5eb18",
		"name": "Tests for Word API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21486313"
	},
	"item": [
		{
			"name": "Set environment",
			"item": [
				{
					"name": "Set environment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('wordTC1.1', 'guitar');\r",
									"pm.environment.set('wordTC1.2', 'life');\r",
									"pm.environment.set('wordTC1.3', 'you');\r",
									"pm.environment.set('wordTC1.4', 'speak');\r",
									"pm.environment.set('wordTC1.5', 'gorgeous');\r",
									"pm.environment.set('wordTC1.6', 'brightly');\r",
									"pm.environment.set('wordTC1.7', 'from');\r",
									"pm.environment.set('wordTC1.8', 'because');\r",
									"pm.environment.set('wordTC1.9', 'ugh');\r",
									"pm.environment.set('wordTC1.10', 'mother-in-law');\r",
									"pm.environment.set('wordTC1.11', \"o'clock\");\r",
									"pm.environment.set('wordTC1.12', 'etc.');\r",
									"pm.environment.set('wordTC1.13', 'car park');\r",
									"pm.environment.set('wordTC1.14', '.22-caliber');\r",
									"pm.environment.set('wordTC1.15', 'i');\r",
									"pm.environment.set('wordTC1.16', 'be');\r",
									"pm.environment.set('wordTC1.17', 'pneumonoultramicroscopicsilicovolcanoconiosis');\r",
									"pm.environment.set('wordTC1.20', 'Life');\r",
									"pm.environment.set('wordTC1.21', 'liFe');\r",
									"pm.environment.set('wordTC1.22', 'dogs');\r",
									"pm.environment.set('wordTC1.23', 'to dance');\r",
									"pm.environment.set('wordTC1.24', 'look for');\r",
									"pm.environment.set('wordTC1.25.1', 'speaks');\r",
									"pm.environment.set('wordTC1.25.2', 'speak');\r",
									"pm.environment.set('wordTC1.26.1', 'swum');\r",
									"pm.environment.set('wordTC1.26.2', 'swim');\r",
									"pm.environment.set('wordTC1.27.1', 'became');\r",
									"pm.environment.set('wordTC1.27.2', 'become');\r",
									"pm.environment.set('wordTC1.28.1', 'walked');\r",
									"pm.environment.set('wordTC1.28.2', 'walk');\r",
									"pm.environment.set('wordTC1.29', 'to look for');\r",
									"pm.environment.set('wordTC1.30.1', 'brighter');\r",
									"pm.environment.set('wordTC1.30.2', 'bright');\r",
									"pm.environment.set('wordTC1.31.1', 'brightest');\r",
									"pm.environment.set('wordTC1.31.2', 'bright');\r",
									"pm.environment.set('wordTC1.32', 'london');\r",
									"pm.environment.set('wordTC1.33', 'London');\r",
									"pm.environment.set('wordTC1.34', 'paint');\r",
									"pm.environment.set('wordTC1.35', 'fiancé');\r",
									"pm.environment.set('wordTC1.36', '911');\r",
									"pm.environment.set('wordTC1.37', 'dfeffsdf');\r",
									"pm.environment.set('wordTC1.38', 'katze');\r",
									"pm.environment.set('wordTC1.39', 'кошка');\r",
									"pm.environment.set('wordTC1.40', 'car dog');\r",
									"pm.environment.set('wordTC1.41', '↗⊠⌚');\r",
									"pm.environment.set('wordTC1.42', \".- '\");\r",
									"pm.environment.set('wordTC1.43', 'car_park');\r",
									"pm.environment.set('wordTC2.1', 'music');\r",
									"pm.environment.set('wordTC2.25', 'good');\r",
									"pm.environment.set('wordTC2.26', 'good');\r",
									"pm.environment.set('wordTC2.27', 'good');\r",
									"pm.environment.set('wordTC2.28', 'good');\r",
									"pm.environment.set('wordTC2.29', 'hatchback');\r",
									"pm.environment.set('wordTC2.30', 'purple');\r",
									"pm.environment.set('wordTC2.31', 'finger');\r",
									"pm.environment.set('wordTC2.32', 'building');\r",
									"pm.environment.set('wordTC2.33', 'einstein');\r",
									"pm.environment.set('wordTC2.34', 'president');\r",
									"pm.environment.set('wordTC2.35', 'red');\r",
									"pm.environment.set('wordTC2.36', 'bump');\r",
									"pm.environment.set('wordTC2.37', 'rub');\r",
									"pm.environment.set('wordTC2.38', 'dory');\r",
									"pm.environment.set('wordTC2.39', 'cult');\r",
									"pm.environment.set('wordTC2.40', 'water');\r",
									"pm.environment.set('wordTC2.41', 'wood');\r",
									"pm.environment.set('wordTC2.42', 'chaotic');\r",
									"pm.environment.set('wordTC2.43', 'math');\r",
									"pm.environment.set('wordTC2.44', 'advil');\r",
									"pm.environment.set('wordTC2.45', 'colloquialism');\r",
									"pm.environment.set('wordTC2.46', 'chips');\r",
									"pm.environment.set('wordTC2.47', 'canada');\r",
									"pm.environment.set('wordTC2.48', '.22-caliber');\r",
									"pm.environment.set('keyName', \"X-RapidAPI-Key\");\r",
									"pm.environment.set('keyValue', \"66ef45eb8amsh5471d964edc9042p12b4dajsn80565566cd70\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/words/word",
							"host": [
								"{{host}}"
							],
							"path": [
								"words",
								"word"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1. GET a Word tests",
			"item": [
				{
					"name": "TC1.1 NoAuth can't GET a Word",
					"item": [
						{
							"name": "TC1.1 NoAuth user can't GET details of the word (common noun: English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC1.2-1.9 GET different parts of speech tests",
					"item": [
						{
							"name": "TC1.2 Common noun: English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.2');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.3 Pronoun: English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.3');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.4 Verb: English, base form, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.4');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.5 Adjective: English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.5');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.6 Adverb: English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.6');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.7 Preposition: English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.7');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.8 Conjunction: English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.8');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.9 Interjection: English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.9');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC1.10-1.14 GET Words with special characters and digits",
					"item": [
						{
							"name": "TC1.10 Word with hyphen: English, Latin letters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.10');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.11 Word with apostrophe: English, Latin letters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.11');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.12 Word with period: English, Latin letters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.12');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.13 Word with space (two-part word): English, Latin letters, no digits, all lowercase, length > 2 characters Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.13');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.14 Word with digits: English, Latin letters, all lowercase, length > 2 characters Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.14');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC1.15-1.17 GET shortest and longest Words",
					"item": [
						{
							"name": "TC1.15  Word of 1 character: English, Latin letters, no special characters, no digits, all lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.15');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.16  Word of 2 characters: English, Latin letters, no special characters, no digits, all lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.16');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.17  Longest common noun - 45 characters: English, Latin letters, no special characters, no digits, all lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.17');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC1.20-1.22 GET Common nouns: uppercase letters, plural",
					"item": [
						{
							"name": "TC1.20 Common noun: uppercase letter at the beginning, English, Latin letters, no special characters, no digits, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"let wordInputLC = wordInput.toLowerCase();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInputLC)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.20');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.21 Common noun: uppercase letter off the beginning, English, Latin letters, no special characters, no digits, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"let wordInputLC = wordInput.toLowerCase();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInputLC)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.21');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.22 Common noun: plural, English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.22');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC1.23-1.29 GET Verbs of various forms",
					"item": [
						{
							"name": "TC1.23 Verb: infinitive, English, Latin letters, has space, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.23');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.24 Verb: base form with particle, English, Latin letters, has space, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.24');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.25 Verb: third person singular form, English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const baseForm = pm.environment.get('baseForm');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(baseForm)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.25.1');\r",
											"pm.environment.set('wordInput', word);\r",
											"const base = pm.environment.get('wordTC1.25.2');\r",
											"pm.environment.set('baseForm', base)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.26 Verb: irregular, past participle form, English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const baseForm = pm.environment.get('baseForm');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(baseForm)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.26.1');\r",
											"pm.environment.set('wordInput', word);\r",
											"const base = pm.environment.get('wordTC1.26.2');\r",
											"pm.environment.set('baseForm', base)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.27 Verb: irregular, past simple form, English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const baseForm = pm.environment.get('baseForm');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(baseForm)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.27.1');\r",
											"pm.environment.set('wordInput', word);\r",
											"const base = pm.environment.get('wordTC1.27.2');\r",
											"pm.environment.set('baseForm', base)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.28 Verb: regular, past simple/participle form, English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const baseForm = pm.environment.get('baseForm');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(baseForm)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.28.1');\r",
											"pm.environment.set('wordInput', word);\r",
											"const base = pm.environment.get('wordTC1.28.2');\r",
											"pm.environment.set('baseForm', base)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.29 Phrasal verb: infinitive with particle, English, Latin letters, has space, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.29');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC1.30-1.31 GET Adjectives of various forms",
					"item": [
						{
							"name": "TC1.30 Comparative adjective: English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const baseForm = pm.environment.get('baseForm');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(baseForm)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.30.1');\r",
											"pm.environment.set('wordInput', word);\r",
											"const base = pm.environment.get('wordTC1.30.2');\r",
											"pm.environment.set('baseForm', base)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.31 Superlative adjective: English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const baseForm = pm.environment.get('baseForm');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(baseForm)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.31.1');\r",
											"pm.environment.set('wordInput', word);\r",
											"const base = pm.environment.get('wordTC1.31.2');\r",
											"pm.environment.set('baseForm', base)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC1.32 GET Proper noun with lower and uppercase letters",
					"item": [
						{
							"name": "TC1.32 Proper noun: all lowercase, English, Latin letters, no special characters, no digits,length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.32');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.33 Proper noun: uppercase letters where supposed, English, Latin letters, no special characters, no digits,length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"let wordInputLC = wordInput.toLowerCase();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInputLC)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.33');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC1.34 GET Word that could be different parts of speech",
					"item": [
						{
							"name": "TC1.34 Word, that could be different parts of speech: English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"const results = body.results;\r",
											"\r",
											"const pos = results.filter(el => el.partOfSpeech);\r",
											"\r",
											"pm.test('Number of partOfSpeech details is above 1 = ' + pos.length, function () {\r",
											"    pm.expect(pos.length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.34');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC1.35 GET English loan Word with non-Latin letters",
					"item": [
						{
							"name": "TC1.35 Common noun: English, has non-Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce is above 1 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.be.above(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Rhymes are not returned\", function () {\r",
											"    pm.expect(body.rhymes).to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.35');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC1.36-1.43 Various negative checks",
					"item": [
						{
							"name": "TC1.36 Input has digits only, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Word details can't be retrieved\", function () {\r",
											"    pm.expect(body.success).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('word not found')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.36');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.37 Non-existent word: Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Word details can't be retrieved\", function () {\r",
											"    pm.expect(body.success).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('word not found')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.37');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.38 Common noun: Non-English, Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Word details can't be retrieved\", function () {\r",
											"    pm.expect(body.success).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('word not found')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.38');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.39 Common noun: Non-English, Non-Latin letters, no special characters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Word details can't be retrieved\", function () {\r",
											"    pm.expect(body.success).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('word not found')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.39');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.40 Two different words in one request separated by space: English, Latin letters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Word details can't be retrieved\", function () {\r",
											"    pm.expect(body.success).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('word not found')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.40');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.41 Random symbols, which couldn't be in any word, length > 2 symbols",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Word details can't be retrieved\", function () {\r",
											"    pm.expect(body.success).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('word not found')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.41');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.42 Input has special characters only, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Word details can't be retrieved\", function () {\r",
											"    pm.expect(body.success).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('word not found')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.42');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC1.43 Word with underline (two-part word): English, Latin letters, no digits, all lowercase, length > 2 characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Word details can't be retrieved\", function () {\r",
											"    pm.expect(body.success).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('word not found')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const word = pm.environment.get('wordTC1.43');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "2. GET Word Details tests",
			"item": [
				{
					"name": "TC2.1-2.24 NoAuth can't GET Word Details",
					"item": [
						{
							"name": "TC2.1 NoAuth user can't GET 'definitions' of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"definitions\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.2 NoAuth user can't GET 'synonyms' of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"synonyms\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.3 NoAuth user can't GET 'antonyms' of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"antonyms\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.4 NoAuth user can't GET 'examples' of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"examples\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.5 NoAuth user can't GET 'typeOf' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"typeOf\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.6 NoAuth user can't GET 'hasTypes' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"hasTypes\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.7 NoAuth user can't GET 'partOf' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"partOf\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.8 NoAuth user can't GET 'hasParts' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"hasParts\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.9 NoAuth user can't GET 'instanceOf' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"instanceOf\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.10 NoAuth user can't GET 'hasInstances' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"hasInstances\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.11 NoAuth user can't GET 'similarTo' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"similarTo\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.12 NoAuth user can't GET 'also' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"also\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.13 NoAuth user can't GET 'entails' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"entails\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.14 NoAuth user can't GET 'memberOf' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"memberOf\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.15 NoAuth user can't GET 'hasMembers' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"hasMembers\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.16 NoAuth user can't GET 'substanceOf' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"substanceOf\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.17 NoAuth user can't GET 'hasSubstances' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"hasSubstances\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.18 NoAuth user can't GET 'inCategory' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"inCategory\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.19 NoAuth user can't GET 'hasCategories' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"hasCategories\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.20 NoAuth user can't GET 'usageOf' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"usageOf\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.21 NoAuth user can't GET 'hasUsages' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"hasUsages\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.22 NoAuth user can't GET 'inRegion' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"inRegion\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.23 NoAuth user can't GET 'regionOf' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"regionOf\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.24 NoAuth user can't GET 'pertainsTo' details of the input word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401)\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(body.message).to.equal('Invalid API key. Go to https://docs.rapidapi.com/docs/keys for more info.')\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"pertainsTo\");\r",
											"const word = pm.environment.get('wordTC2.1');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TC2.25-2.48 GET Word details tests",
					"item": [
						{
							"name": "TC2.25 GET 'definitions' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test('Number of keys retrieved in responce equals 2 = ' + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2);\r",
											"});\r",
											"\r",
											"const definitions = body.definitions;\r",
											"\r",
											"const def = definitions.filter(el => el.definition);\r",
											"\r",
											"pm.test(\"Number of retrieved definitions is above 0 = \" + def.length, function () {\r",
											"    pm.expect(def.length).to.be.above(0);\r",
											"});\r",
											"\r",
											"const pos = definitions.filter(el => el.partOfSpeech);\r",
											"\r",
											"pm.test(\"partOfSpeech details are retrieved and equal number of definitions = \" + pos.length, function () {\r",
											"    pm.expect(pos.length).to.equal(def.length);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"definitions\");\r",
											"const word = pm.environment.get('wordTC2.25');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.26 GET 'synonyms' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"detailType\", \"synonyms\");\r",
											"const word = pm.environment.get('wordTC2.26');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.27 GET 'antonyms' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'antonyms');\r",
											"const word = pm.environment.get('wordTC2.27');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.28 GET 'examples' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'examples');\r",
											"const word = pm.environment.get('wordTC2.28');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.29 GET 'typeOf' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'typeOf');\r",
											"const word = pm.environment.get('wordTC2.29');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.30 GET 'hasTypes' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'hasTypes');\r",
											"const word = pm.environment.get('wordTC2.30');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.31 GET 'partOf' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'partOf');\r",
											"const word = pm.environment.get('wordTC2.31');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.32 GET 'hasParts' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'hasParts');\r",
											"const word = pm.environment.get('wordTC2.32');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.33 GET 'instanceOf' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'instanceOf');\r",
											"const word = pm.environment.get('wordTC2.33');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.34 GET 'hasInstances' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'hasInstances');\r",
											"const word = pm.environment.get('wordTC2.34');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.35 GET 'similarTo' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'similarTo');\r",
											"const word = pm.environment.get('wordTC2.35');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.36 GET 'also' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'also');\r",
											"const word = pm.environment.get('wordTC2.36');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.37 GET 'entails' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'entails');\r",
											"const word = pm.environment.get('wordTC2.37');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.38 GET 'memberOf' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'memberOf');\r",
											"const word = pm.environment.get('wordTC2.38');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.39 GET 'hasMembers' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'hasMembers');\r",
											"const word = pm.environment.get('wordTC2.39');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.40 GET 'substanceOf' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'substanceOf');\r",
											"const word = pm.environment.get('wordTC2.40');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.41 GET 'hasSubstances' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'hasSubstances');\r",
											"const word = pm.environment.get('wordTC2.41');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.42 GET 'inCategory' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'inCategory');\r",
											"const word = pm.environment.get('wordTC2.42');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.43 GET 'hasCategories' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'hasCategories');\r",
											"const word = pm.environment.get('wordTC2.43');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.44 GET 'usageOf' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'usageOf');\r",
											"const word = pm.environment.get('wordTC2.44');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.45 GET 'hasUsages' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'hasUsages');\r",
											"const word = pm.environment.get('wordTC2.45');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.46 GET 'inRegion' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'inRegion');\r",
											"const word = pm.environment.get('wordTC2.46');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.47 GET 'regionOf' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'regionOf');\r",
											"const word = pm.environment.get('wordTC2.47');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC2.48 GET 'pertainsTo' for the word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.json();\r",
											"const wordInput = pm.environment.get('wordInput');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Correct word is found\", function () {\r",
											"    pm.expect(body.word).to.equal(wordInput)\r",
											"});\r",
											"\r",
											"pm.test(\"No extra keys retrieved, number of keys in responce equals 2 = \" + Object.keys(body).length, function () {\r",
											"    pm.expect(Object.keys(body).length).to.equal(2)\r",
											"});\r",
											"\r",
											"const detailKey = pm.environment.get(\"detailType\");\r",
											"const details = Object.keys(body).find(el => el === detailKey);\r",
											"console.log(details);\r",
											"\r",
											"pm.test(\"Correct details are retrieved = \" + details, function () {\r",
											"    pm.expect(details).not.to.be.undefined\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('detailType', 'pertainsTo');\r",
											"const word = pm.environment.get('wordTC2.48');\r",
											"pm.environment.set('wordInput', word)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{keyValue}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "{{keyName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/words/{{wordInput}}/{{detailType}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"words",
										"{{wordInput}}",
										"{{detailType}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Unset environment",
			"item": [
				{
					"name": "Unset environment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset('wordTC1.1');\r",
									"pm.environment.unset('wordTC1.2');\r",
									"pm.environment.unset('wordTC1.3');\r",
									"pm.environment.unset('wordTC1.4');\r",
									"pm.environment.unset('wordTC1.5');\r",
									"pm.environment.unset('wordTC1.6');\r",
									"pm.environment.unset('wordTC1.7');\r",
									"pm.environment.unset('wordTC1.8');\r",
									"pm.environment.unset('wordTC1.9');\r",
									"pm.environment.unset('wordTC1.10');\r",
									"pm.environment.unset('wordTC1.11');\r",
									"pm.environment.unset('wordTC1.12');\r",
									"pm.environment.unset('wordTC1.13');\r",
									"pm.environment.unset('wordTC1.14');\r",
									"pm.environment.unset('wordTC1.15');\r",
									"pm.environment.unset('wordTC1.16');\r",
									"pm.environment.unset('wordTC1.17');\r",
									"pm.environment.unset('wordTC1.18');\r",
									"pm.environment.unset('wordTC1.19');\r",
									"pm.environment.unset('wordTC1.20');\r",
									"pm.environment.unset('wordTC1.21');\r",
									"pm.environment.unset('wordTC1.22');\r",
									"pm.environment.unset('wordTC1.23');\r",
									"pm.environment.unset('wordTC1.24');\r",
									"pm.environment.unset('wordTC1.25.1');\r",
									"pm.environment.unset('wordTC1.25.2');\r",
									"pm.environment.unset('wordTC1.26.1');\r",
									"pm.environment.unset('wordTC1.26.2');\r",
									"pm.environment.unset('wordTC1.27.1');\r",
									"pm.environment.unset('wordTC1.27.2');\r",
									"pm.environment.unset('wordTC1.28.1');\r",
									"pm.environment.unset('wordTC1.28.2');\r",
									"pm.environment.unset('wordTC1.29');\r",
									"pm.environment.unset('wordTC1.30.1');\r",
									"pm.environment.unset('wordTC1.30.2');\r",
									"pm.environment.unset('wordTC1.31.1');\r",
									"pm.environment.unset('wordTC1.31.2');\r",
									"pm.environment.unset('wordTC1.32');\r",
									"pm.environment.unset('wordTC1.33');\r",
									"pm.environment.unset('wordTC1.34');\r",
									"pm.environment.unset('wordTC1.35');\r",
									"pm.environment.unset('wordTC1.36');\r",
									"pm.environment.unset('wordTC1.37');\r",
									"pm.environment.unset('wordTC1.38');\r",
									"pm.environment.unset('wordTC1.39');\r",
									"pm.environment.unset('wordTC1.40');\r",
									"pm.environment.unset('wordTC1.41');\r",
									"pm.environment.unset('wordTC1.42');\r",
									"pm.environment.unset('wordTC1.43');\r",
									"pm.environment.unset('wordTC2.1');\r",
									"pm.environment.unset('wordTC2.25');\r",
									"pm.environment.unset('wordTC2.26');\r",
									"pm.environment.unset('wordTC2.27');\r",
									"pm.environment.unset('wordTC2.28');\r",
									"pm.environment.unset('wordTC2.29');\r",
									"pm.environment.unset('wordTC2.30');\r",
									"pm.environment.unset('wordTC2.31');\r",
									"pm.environment.unset('wordTC2.32');\r",
									"pm.environment.unset('wordTC2.33');\r",
									"pm.environment.unset('wordTC2.34');\r",
									"pm.environment.unset('wordTC2.35');\r",
									"pm.environment.unset('wordTC2.36');\r",
									"pm.environment.unset('wordTC2.37');\r",
									"pm.environment.unset('wordTC2.38');\r",
									"pm.environment.unset('wordTC2.39');\r",
									"pm.environment.unset('wordTC2.40');\r",
									"pm.environment.unset('wordTC2.41');\r",
									"pm.environment.unset('wordTC2.42');\r",
									"pm.environment.unset('wordTC2.43');\r",
									"pm.environment.unset('wordTC2.44');\r",
									"pm.environment.unset('wordTC2.45');\r",
									"pm.environment.unset('wordTC2.46');\r",
									"pm.environment.unset('wordTC2.47');\r",
									"pm.environment.unset('wordTC2.48');\r",
									"pm.environment.unset('detailType');\r",
									"pm.environment.unset('word');\r",
									"pm.environment.unset('wordInput');\r",
									"pm.environment.unset('baseForm');\r",
									"pm.environment.unset('keyName');\r",
									"pm.environment.unset('keyValue')"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/words/word",
							"host": [
								"{{host}}"
							],
							"path": [
								"words",
								"word"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}